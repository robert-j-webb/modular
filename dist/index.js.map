{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/globalFunctions.js", "../src/index.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// -- Text/Code Fuctions\n// Wrap Letters\nexport const wrapLetters = (element) => {\n  const processNode = (node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      // Check if the parent node has the \"letter\" class\n      if (!node.parentNode.classList.contains('letter')) {\n        const codeText = node.textContent;\n        const fragment = document.createDocumentFragment();\n\n        for (let i = 0; i < codeText.length; i++) {\n          const span = document.createElement('span');\n          span.className = 'letter';\n          span.textContent = codeText[i];\n          fragment.appendChild(span);\n        }\n\n        node.parentNode.replaceChild(fragment, node);\n      }\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      if (node.tagName !== 'BR') {\n        const childNodes = Array.from(node.childNodes);\n        childNodes.forEach(processNode);\n      }\n    }\n  };\n\n  $(element)\n    .contents()\n    .each(function () {\n      processNode(this);\n    });\n};\n\nconst revealLetters = (elements, letterDelay) => {\n  const codeTimeline = gsap.timeline(); // create a single timeline for all elements and letters\n\n  let globalLetterIndex = 0; // initialize a global letter index\n  // Iterate over each element passed\n  $(elements).each((elementIndex, element) => {\n    const letters = $(element).find('.letter').not('.line-numbers-row .code-letter');\n    const highlights = $(element).find('.word-highlight');\n\n    // Animate each letter in the current element\n    letters.each((letterIndex, letter) => {\n      codeTimeline.fromTo(\n        letter,\n        { visibility: 'hidden' },\n        { visibility: 'initial' },\n        globalLetterIndex * letterDelay,\n        '<'\n      );\n      globalLetterIndex++; // increment the global letter index\n    });\n    if (highlights.length) {\n      console.log(highlights);\n      const currentBgColor = window\n        .getComputedStyle(document.body)\n        .getPropertyValue('background-color');\n      const currentBgColorRGBA = currentBgColor.replace(/^rgb(a)?\\(/, '').replace(/\\)$/, '');\n      const currentBgColorHex = currentBgColor.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n        ? currentBgColor\n        : null;\n      const backgroundColor = currentBgColorHex || `rgba(${currentBgColorRGBA}, 0)`;\n      codeTimeline.from(highlights, { backgroundColor, duration: 0.35 });\n    }\n  });\n  return codeTimeline;\n};\n\n// --- Text Animations\n// Letter Animation\nexport const letterAnimation = (elements, letterType) => {\n  let letterDelay;\n  if (letterType === 'label') {\n    letterDelay = 0.03;\n  } else if (letterType === 'heading') {\n    letterDelay = 0.01;\n  } else if (typeof letterType === 'number') {\n    letterDelay = letterType;\n  } else {\n    letterDelay = 0.01;\n  }\n  wrapLetters(elements);\n  return revealLetters(elements, letterDelay);\n};\n\n// CodeAnimation\nexport const codeAnimation = (className) => {\n  const codeBlock = $(className).find('code');\n  const lineNumbers = codeBlock.find('.line-numbers-rows').eq(0).clone();\n  codeBlock.find('.line-numbers-rows').remove();\n  wrapLetters(codeBlock);\n  codeBlock.prepend(lineNumbers);\n  return revealLetters(codeBlock, 0.01);\n};\n\n// Typewrite\nexport const typeText = (element, text) => {\n  const codeTimeline = gsap.timeline(); // create a child timeline based on the defaults\n  codeTimeline.to(\n    element,\n    {\n      text: { value: text, ease: 'none', speed: 1 },\n    },\n    '<'\n  );\n  return codeTimeline;\n};\n\n// ---- Graphs\n// Animate Stats\nconst animateCounter = ($element) => {\n  $($element).each(function () {\n    const Cont = { val: 0 };\n    const originalText = $(this).text();\n    const targetValue = parseFloat(originalText);\n    const isOriginalHalf = originalText % 1 >= 0.5 && originalText % 1 < 1;\n\n    if (!isNaN(targetValue)) {\n      // Hide the element before the animation starts\n      $(this).css('visibility', 'hidden');\n      const onUpdate = () => {\n        let formattedValue;\n\n        if (Math.abs(targetValue - Cont.val) <= 0.01) {\n          formattedValue = targetValue % 1 === 0 ? targetValue.toFixed(0) : targetValue.toFixed(2);\n        } else if (Cont.val >= 1) {\n          formattedValue = Math.floor(Cont.val).toFixed(0);\n        } else {\n          formattedValue = Cont.val.toFixed(2);\n        }\n\n        $(this).text(formattedValue);\n      };\n\n      TweenLite.to(Cont, 1, {\n        val: targetValue,\n        onUpdate: onUpdate,\n        onStart: () => $(this).css('visibility', 'visible'),\n      });\n    } else {\n      return;\n    }\n  });\n};\n// Animate Graph Head\nconst graphHeadAnimation = (graphClassPrefix) => {\n  const masterTimeline = gsap.timeline();\n  masterTimeline\n    .add(letterAnimation(`.graph${graphClassPrefix}_head .text-size-metadata`), 'label')\n    .add(() => animateCounter(`.graph${graphClassPrefix}_head .graph-number`), '<');\n\n  return masterTimeline;\n};\n\n// Graphs Inner Animations\nconst animateGraphRow = (targets, graphClassPrefix) => {\n  const masterTimeline = gsap.timeline();\n\n  $(targets).each(function (index) {\n    let row = $(this).find(`.graph${graphClassPrefix}_box`);\n    let label = $(this).find(`.graph${graphClassPrefix}_label div`);\n    let number = $(this).find(`.graph${graphClassPrefix}_row-num div`);\n\n    const codeTimeline = gsap.timeline();\n\n    codeTimeline\n      .from(row, { scaleX: 0, duration: 1 })\n      // Show the number element and call animateCounter\n      .add(() => {\n        animateCounter(number);\n      }, '<')\n      .add(letterAnimation(label, 'label'));\n\n    // Stagger animations using the add() method\n    masterTimeline.add(codeTimeline, index * 0.2);\n  });\n\n  return masterTimeline;\n};\n\nconst animateGraphChart = (target) => {\n  let tl = gsap.timeline();\n\n  tl.fromTo(\n    target,\n    {\n      scaleY: 0,\n    },\n    { scaleY: 1, duration: 1 },\n    '<'\n  );\n};\n\n// Graph Types Animations\nexport const animateHorizontalGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n  tl.add(graphHeadAnimation(graphType));\n  tl.add(animateGraphRow(target, graphType), '<');\n\n  return tl;\n};\n\nexport const animateChartGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n\n  let labels = $(target).find('.text-size-label');\n  let labelDot = $(trigger).find('.graphd_legend-dot');\n  let chart = $(target).find('.graph-charts');\n\n  tl.add(graphHeadAnimation(graphType));\n  tl.add(letterAnimation(labels, 'label'), '<')\n    .add(animateGraphChart(chart), '<')\n    .fromTo(labelDot, { scale: 0.5, opacity: 0 }, { scale: 1, opacity: 1 }, '<');\n\n  return tl;\n};\n\nexport const animateBoxGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n\n  let labels = $(target).find('.text-size-label');\n  let box = $(target).find('.graphc_item');\n  tl.add(graphHeadAnimation(graphType));\n  tl.fromTo(\n    box,\n    {\n      scale: 0,\n      opacity: 0,\n    },\n    {\n      scale: 1,\n      opacity: 1,\n      stagger: 0.2,\n    }\n  ).add(letterAnimation(labels, 'label'));\n\n  return tl;\n};\n", "import { codeAnimation, letterAnimation, typeText } from '$utils/globalFunctions';\n\ndocument.documentElement.classList.add('js-enabled');\n\n$(document).ready(function () {\n  // Init Reveal\n  $('.main-wrapper').delay(300).fadeTo('slow', 1);\n\n  // Register GSAP\n  gsap.registerPlugin(ScrollTrigger);\n\n  // GSAP IMG SET\n  $('img').each(function () {\n    $(this).removeAttr('loading');\n    ScrollTrigger.refresh();\n  });\n\n  // RemoveScrollBar for all overflow elements\n  function addNoScrollbarClass() {\n    const allElements = document.querySelectorAll('*');\n\n    for (const element of allElements) {\n      // Exclude body and html elements\n      if (element.tagName.toLowerCase() === 'body' || element.tagName.toLowerCase() === 'html') {\n        continue;\n      }\n\n      const style = window.getComputedStyle(element);\n      if (\n        style.overflow === 'auto' ||\n        style.overflow === 'scroll' ||\n        style.overflowX === 'auto' ||\n        style.overflowX === 'scroll' ||\n        style.overflowY === 'auto' ||\n        style.overflowY === 'scroll'\n      ) {\n        element.classList.add('no-scrollbar');\n      }\n    }\n  }\n  addNoScrollbarClass();\n\n  // -- Lines Animation\n  let lineMaskTriggers = [];\n  function setupLineMaskScrollTriggers() {\n    // Kill existing line mask triggers before setting up new ones\n    lineMaskTriggers.forEach((st) => st.kill());\n    lineMaskTriggers = [];\n    $('.line-mask').attr('style', '');\n\n    $('.line-mask').each(function () {\n      const computedStyle = window.getComputedStyle($(this)[0]);\n      const originalHeight = computedStyle.getPropertyValue('height');\n\n      if ($(this).closest('.line-mask_wrap').hasClass('bottom')) {\n        gsap.set($(this), { height: '0%' });\n      } else {\n        gsap.set($(this), { height: '100%' });\n      }\n\n      const scrollTrigger = ScrollTrigger.create({\n        trigger: $(this).closest('.line-mask_wrap'),\n        once: true,\n        start: '70% bottom',\n        invalidateOnRefresh: true,\n        onEnter: () => {\n          gsap.to($(this), { height: originalHeight, duration: 1.2 });\n        },\n      });\n\n      // Add the ScrollTrigger instance to the lineMaskTriggers array\n      lineMaskTriggers.push(scrollTrigger);\n    });\n  }\n  function debounce(func, wait) {\n    let timeout;\n    return function () {\n      const context = this,\n        args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n  // Set up the ScrollTriggers on window resize, debounce the handler with 250ms delay\n  let lastWindowWidth = $(window).width();\n  setupLineMaskScrollTriggers();\n  $(window).on(\n    'resize',\n    debounce(() => {\n      const currentWindowWidth = $(window).width();\n\n      if (currentWindowWidth !== lastWindowWidth) {\n        setupLineMaskScrollTriggers();\n        lastWindowWidth = currentWindowWidth;\n      }\n    }, 250)\n  );\n\n  // -- Code Blocks Animations to view\n  $('.dashboard_inner[code-animation]').each(function () {\n    const codeBlock = $(this).find('.dashboard_code-block');\n    codeBlock.hide();\n\n    ScrollTrigger.create({\n      trigger: $(this),\n      once: true,\n      start: '50% bottom',\n      invalidateOnRefresh: true,\n      toggleActions: 'play null null null',\n      onEnter: () => {\n        codeBlock.show();\n        codeAnimation($(this));\n      },\n    });\n  });\n\n  // -- CTA Animation\n  $('#ctaBox').each(function () {\n    let label = $(this).find('#ctaLabel');\n    let text = $(this).find('#ctaText');\n    let triggerElement = $(this);\n    let tl = gsap.timeline({\n      ease: Power2.easeOut,\n      paused: true,\n      scrollTrigger: {\n        trigger: triggerElement,\n        // trigger element - viewport\n        start: 'center bottom',\n        onEnter: () => {\n          // Play the timeline when the trigger element enters the viewport\n          tl.play();\n        },\n      },\n    });\n    tl.add(letterAnimation(label)).add(letterAnimation(text));\n  });\n\n  // -- Menu\n\n  // Base\n  var menuOpenAnim = false;\n  var dropdownOpen = false;\n  const menuLinks = '.navbar_part.links';\n  const menuLinksItems = '.navbar_link';\n  const menuButton = '.navbar_menu-btn';\n\n  // Variable Anim\n  let revealAnim = {\n    y: '100%',\n    opacity: 0,\n    stagger: {\n      each: 0.05,\n    },\n  };\n\n  // Menu Animation\n  let menuText = 'Close';\n\n  function createNavReveal() {\n    let navReveal = gsap\n      .timeline({ paused: true })\n      .call(function () {\n        menuOpenAnim = false;\n      })\n      .add(typeText(menuButton + ' div', () => menuText)) // Use a function that returns menuText value\n      .fromTo(menuLinks, { display: 'none' }, { display: 'flex' }, '<')\n      .fromTo(menuLinks, { yPercent: -100 }, { yPercent: 0 }, '<')\n      .from(menuLinksItems, revealAnim, '-=0.2')\n      .fromTo(menuLinksItems, { pointerEvents: 'none' }, { pointerEvents: 'auto' }, '<')\n      .call(function () {\n        menuOpenAnim = true;\n      });\n    return navReveal;\n  }\n\n  let navReveal;\n\n  // GSAP's matchMedia\n  ScrollTrigger.matchMedia({\n    '(max-width: 991px)': function () {\n      // Apply the animation only on screens with a max-width of 991px\n      navReveal = createNavReveal();\n    },\n  });\n\n  // Actions\n  // Open on Click\n  $('.navbar_menu-btn').on('click', openMenu);\n  $('.navbar_dropdown').on('click', function () {\n    if (!dropdownOpen) {\n    }\n  });\n\n  // Functions\n  function openMenu() {\n    if (navReveal) {\n      playMenuAnimation();\n    }\n  }\n\n  function playMenuAnimation() {\n    updateMenuText();\n    if (!menuOpenAnim) {\n      $('html, body').addClass('overflow-hidden');\n      currentscrollpos = $(window).scrollTop();\n      $('html, body').animate({ scrollTop: 0 }, 0);\n      menuOpenAnim = true;\n    } else {\n      $('html, body').removeClass('overflow-hidden');\n      $('html, body').animate({ scrollTop: currentscrollpos }, 0);\n      menuOpenAnim = false;\n    }\n  }\n\n  function updateMenuText() {\n    menuText = menuOpenAnim ? 'Menu' : 'Close';\n  }\n});\n"],
  "mappings": "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",
  "names": ["navReveal"]
}
