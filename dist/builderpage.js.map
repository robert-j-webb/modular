{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/globalFunctions.js", "../src/utils/tabCarousel.js", "../src/builderpage.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// -- Text/Code Fuctions\n// Wrap Letters\nexport const wrapLetters = (element) => {\n  const processNode = (node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      // Check if the parent node has the \"letter\" class\n      if (!node.parentNode.classList.contains('letter')) {\n        const codeText = node.textContent;\n        const fragment = document.createDocumentFragment();\n\n        for (let i = 0; i < codeText.length; i++) {\n          const span = document.createElement('span');\n          span.className = 'letter';\n          span.textContent = codeText[i];\n          fragment.appendChild(span);\n        }\n\n        node.parentNode.replaceChild(fragment, node);\n      }\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      if (node.tagName !== 'BR') {\n        const childNodes = Array.from(node.childNodes);\n        childNodes.forEach(processNode);\n      }\n    }\n  };\n\n  $(element)\n    .contents()\n    .each(function () {\n      processNode(this);\n    });\n};\n\nconst revealLetters = (elements, letterDelay) => {\n  const codeTimeline = gsap.timeline(); // create a single timeline for all elements and letters\n\n  let globalLetterIndex = 0; // initialize a global letter index\n  // Iterate over each element passed\n  $(elements).each((elementIndex, element) => {\n    const letters = $(element).find('.letter').not('.line-numbers-row .code-letter');\n    const highlights = $(element).find('.word-highlight');\n\n    // Animate each letter in the current element\n    letters.each((letterIndex, letter) => {\n      codeTimeline.fromTo(\n        letter,\n        { visibility: 'hidden' },\n        { visibility: 'initial' },\n        globalLetterIndex * letterDelay,\n        '<'\n      );\n      globalLetterIndex++; // increment the global letter index\n    });\n    if (highlights.length) {\n      const firstHighlight = highlights[0];\n      const currentBgColor = window\n        .getComputedStyle(firstHighlight)\n        .getPropertyValue('background-color');\n      const currentBoxShadow = window\n        .getComputedStyle(firstHighlight)\n        .getPropertyValue('box-shadow');\n\n      const hexToRGBA = (hex, alpha) => {\n        const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n      };\n\n      const rgbaToTransparent = (rgba) => {\n        const rgbaArray = rgba\n          .replace(/^rgba?\\(/, '')\n          .replace(/\\)$/, '')\n          .split(',');\n        return `rgba(${rgbaArray[0]}, ${rgbaArray[1]}, ${rgbaArray[2]}, 0)`;\n      };\n\n      const isHex = (color) => /^#(?:[0-9a-f]{3}){1,2}$/i.test(color);\n\n      const initialBackgroundColor = isHex(currentBgColor)\n        ? hexToRGBA(currentBgColor, 0)\n        : rgbaToTransparent(currentBgColor);\n\n      const initialBoxShadow = currentBoxShadow.replace(/rgba?\\([^)]+\\)/g, (match) => {\n        return isHex(match) ? hexToRGBA(match, 0) : rgbaToTransparent(match);\n      });\n\n      Array.from(highlights).forEach((element) => {\n        element.style.backgroundColor = initialBackgroundColor;\n        element.style.boxShadow = initialBoxShadow;\n      });\n\n      codeTimeline.to(\n        highlights,\n        {\n          backgroundColor: currentBgColor,\n          boxShadow: currentBoxShadow,\n          duration: 0.35,\n        },\n        '<'\n      );\n    }\n  });\n  return codeTimeline;\n};\n\n// --- Text Animations\n// Letter Animation\nexport const letterAnimation = (elements, letterType) => {\n  let letterDelay;\n  if (letterType === 'label') {\n    letterDelay = 0.03;\n  } else if (letterType === 'heading') {\n    letterDelay = 0.01;\n  } else if (typeof letterType === 'number') {\n    letterDelay = letterType;\n  } else {\n    letterDelay = 0.01;\n  }\n  wrapLetters(elements);\n  return revealLetters(elements, letterDelay);\n};\n\n// CodeAnimation\nexport const codeAnimation = (className) => {\n  const codeBlock = $(className).find('code');\n  const lineNumbers = codeBlock.find('.line-numbers-rows').eq(0).clone();\n  codeBlock.find('.line-numbers-rows').remove();\n  wrapLetters(codeBlock);\n  codeBlock.prepend(lineNumbers);\n  return revealLetters(codeBlock, 0.01);\n};\n\n// Typewrite\nexport const typeText = (element, text) => {\n  const codeTimeline = gsap.timeline(); // create a child timeline based on the defaults\n  codeTimeline.to(\n    element,\n    {\n      text: { value: text, ease: 'none', speed: 1 },\n    },\n    '<'\n  );\n  return codeTimeline;\n};\n\n// Code Files Change\nexport const codeFile = (element, index) => {\n  let tl = gsap.timeline();\n\n  let text = index === 0 ? 'PY' : '&#x1F525';\n  tl.set(element, { text: text });\n  return tl;\n};\n\n// ---- Graphs\n// Animate Stats\nconst animateCounter = ($element) => {\n  $($element).each(function () {\n    const Cont = { val: 0 };\n    const originalText = $(this).text();\n    const targetValue = parseFloat(originalText);\n    const isOriginalHalf = originalText % 1 >= 0.5 && originalText % 1 < 1;\n\n    if (!isNaN(targetValue)) {\n      // Hide the element before the animation starts\n      $(this).css('visibility', 'hidden');\n      const onUpdate = () => {\n        let formattedValue;\n\n        if (Math.abs(targetValue - Cont.val) <= 0.01) {\n          formattedValue = targetValue % 1 === 0 ? targetValue.toFixed(0) : targetValue.toFixed(2);\n        } else if (Cont.val >= 1) {\n          formattedValue = Math.floor(Cont.val).toFixed(0);\n        } else {\n          formattedValue = Cont.val.toFixed(2);\n        }\n\n        $(this).text(formattedValue);\n      };\n\n      TweenLite.to(Cont, 1, {\n        val: targetValue,\n        onUpdate: onUpdate,\n        onStart: () => $(this).css('visibility', 'visible'),\n      });\n    } else {\n      return;\n    }\n  });\n};\n// Animate Graph Head\nconst graphHeadAnimation = (graphClassPrefix) => {\n  const masterTimeline = gsap.timeline();\n  masterTimeline\n    .add(letterAnimation(`.graph${graphClassPrefix}_head .text-size-metadata`), 'label')\n    .add(() => animateCounter(`.graph${graphClassPrefix}_head .graph-number`), '<');\n\n  return masterTimeline;\n};\n\n// Graphs Inner Animations\nconst animateGraphRow = (targets, graphClassPrefix) => {\n  const masterTimeline = gsap.timeline();\n\n  $(targets).each(function (index) {\n    let row = $(this).find(`.graph${graphClassPrefix}_box`);\n    let label = $(this).find(`.graph${graphClassPrefix}_label div`);\n    let number = $(this).find(`.graph${graphClassPrefix}_row-num div`);\n\n    const codeTimeline = gsap.timeline();\n\n    codeTimeline\n      .from(row, { scaleX: 0, duration: 1 })\n      // Show the number element and call animateCounter\n      .add(() => {\n        animateCounter(number);\n      }, '<')\n      .add(letterAnimation(label, 'label'));\n\n    // Stagger animations using the add() method\n    masterTimeline.add(codeTimeline, index * 0.2);\n  });\n\n  return masterTimeline;\n};\n\nconst animateGraphChart = (target) => {\n  let tl = gsap.timeline();\n\n  tl.fromTo(\n    target,\n    {\n      scaleY: 0,\n    },\n    { scaleY: 1, duration: 1 },\n    '<'\n  );\n};\n\n// Graph Types Animations\nexport const animateHorizontalGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n  tl.add(graphHeadAnimation(graphType));\n  tl.add(animateGraphRow(target, graphType), '<');\n\n  return tl;\n};\n\nexport const animateChartGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n\n  let labels = $(target).find('.text-size-label');\n  let labelDot = $(trigger).find('.graphd_legend-dot');\n  let chart = $(target).find('.graph-charts');\n\n  tl.add(graphHeadAnimation(graphType));\n  tl.add(letterAnimation(labels, 'label'), '<')\n    .add(animateGraphChart(chart), '<')\n    .fromTo(labelDot, { scale: 0.5, opacity: 0 }, { scale: 1, opacity: 1 }, '<');\n\n  return tl;\n};\n\nexport const animateBoxGraph = (target, graphType, trigger) => {\n  let triggerElement = $(trigger);\n  let tl = gsap.timeline({\n    ease: Power2.easeOut,\n    paused: true,\n    scrollTrigger: {\n      trigger: triggerElement,\n      start: '70% bottom',\n      onEnter: () => {\n        // Play the timeline when the trigger element enters the viewport\n        tl.play();\n      },\n    },\n  });\n\n  let labels = $(target).find('.text-size-label');\n  let box = $(target).find('.graphc_item');\n  tl.add(graphHeadAnimation(graphType));\n  tl.fromTo(\n    box,\n    {\n      scale: 0,\n      opacity: 0,\n    },\n    {\n      scale: 1,\n      opacity: 1,\n      stagger: 0.2,\n    }\n  ).add(letterAnimation(labels, 'label'));\n\n  return tl;\n};\n", "// Sets up a carousel given tabs, card, and some functions to run on leave and enter.\n// Only starts the carousel when the first tab scrolls into view.\nexport function tabCarousel({ tabs, cards, onCardLeave, onTabLeave, onCardShow, onTabShow }) {\n  if (tabs.length !== cards.length) {\n    throw new Error(`Cards length: ${cards.length} did not match tabs length: ${tabs.length}`);\n  }\n\n  let hasManuallyClicked = false;\n  let curIdx = 0;\n\n  async function showCard(curIdx) {\n    const prevCardIdx = curIdx === 0 ? cards.length - 1 : curIdx - 1;\n\n    await Promise.all([onCardLeave(cards.eq(prevCardIdx)), onTabLeave(tabs.eq(prevCardIdx))]);\n\n    // Wait until the previous card and tab are hidden before moving to the next one.\n    await Promise.all([onCardShow(cards.eq(curIdx)), onTabShow(tabs.eq(curIdx))]);\n  }\n\n  async function startAnimation() {\n    while (!hasManuallyClicked) {\n      await showCard(curIdx);\n      curIdx += 1;\n      if (curIdx === cards.length) {\n        curIdx = 0;\n      }\n    }\n  }\n\n  tabs.each((idx, tabEl) => {\n    tabEl.onclick = () => {\n      // Don't wait for promises to resolve, do everything simultaneously.\n      onCardLeave(cards.eq(curIdx));\n      onTabLeave(tabs.eq(curIdx));\n      onCardShow(cards.eq(idx));\n      onTabShow(tabs.eq(idx));\n      hasManuallyClicked = true;\n      curIdx = idx;\n    };\n  });\n\n  // Wait for scroll into view before you show the animation\n  const intersectionObserver = new IntersectionObserver(\n    (entries) => {\n      if (entries[0].intersectionRatio <= 0) return;\n      startAnimation();\n      intersectionObserver.unobserve(tabs[0]);\n    },\n    { threshold: 1.0 }\n  );\n  intersectionObserver.observe(tabs[0]);\n}\n\n// Uses swiper to make a carousel. Used as the mobile version of the carousel.\nexport function swiperCarousel({ animateOnSlide, sliderSelector, onInit, duration }) {\n  function handleSwiperSlide({ activeIndex, slides }) {\n    if (slides.length === 0) {\n      return;\n    }\n    animateOnSlide($(slides[activeIndex]));\n  }\n\n  new Swiper(sliderSelector, {\n    slidesPerView: 1,\n    spaceBetween: 24,\n    speed: 250,\n    autoplay: {\n      delay: duration,\n    },\n    observer: true,\n    on: {\n      init: (swiperInstance) => {\n        onInit();\n        handleSwiperSlide(swiperInstance);\n      },\n      transitionEnd: (swiperInstance) => {\n        handleSwiperSlide(swiperInstance);\n      },\n    },\n    pagination: {\n      el: '.swiper-navigation',\n      type: 'bullets',\n      clickable: true,\n      bulletActiveClass: 'w-active',\n      bulletClass: 'w-slider-dot',\n    },\n  });\n}\n", "import { codeAnimation, codeFile, letterAnimation, typeText } from '$utils/globalFunctions';\nimport { swiperCarousel, tabCarousel } from '$utils/tabCarousel';\n\n$(document).ready(function () {\n  // #region Hero Slideshow\n\n  function init() {\n    let animation = gsap.timeline({});\n    let targets = $('.headerb_visual img');\n    let numberOfTargets = targets.length;\n\n    let duration = 2; //change this\n    let pause = 0.75; // change this\n\n    let stagger = duration + pause;\n    let repeatDelay = stagger * (numberOfTargets - 1) + pause;\n\n    gsap.set('.headerb_visual', { autoAlpha: 1 });\n    animation\n      .from(targets, {\n        duration: duration,\n        opacity: 0,\n        stagger: {\n          each: stagger,\n          repeat: -1,\n          repeatDelay: repeatDelay,\n        },\n      })\n      .to(\n        targets,\n        {\n          duration: duration,\n          opacity: 0,\n          stagger: {\n            each: stagger,\n            repeat: -1,\n            repeatDelay: repeatDelay,\n          },\n        },\n        stagger\n      );\n  }\n\n  init();\n  animation.pause(imgDuration);\n  gsap.delayedCall(1, () => animation.play());\n\n  // #endregon\n  // #region Tabs\n  /// Tabs implementation:\n  const activeClass = 'tab-active';\n  const progressLine = '.tabs_block-progress-line';\n  const fileNameSelector = '.dashboard_head-filename';\n  const tabTimeline = gsap.timeline({ imgPaused: true });\n  const duration = 4000;\n\n  // Animates a card, by typing the text and filename.\n  function cardAnimation(card) {\n    return new Promise((resolve) => {\n      card.show();\n      const fileNameTxt = card.find('.file-name').text();\n      const fileNameEl = card.parent().parent().find(fileNameSelector);\n      fileNameEl.text('');\n      const typeFileNameTimeline = gsap.timeline();\n      typeFileNameTimeline.add(typeText(fileNameEl, fileNameTxt));\n      tabTimeline.add(codeAnimation(card)).add(typeFileNameTimeline, '<');\n      tabTimeline.play();\n      tabTimeline.then(resolve);\n    });\n  }\n\n  // TABS 1\n  tabCarousel({\n    tabs: $('.tabs').eq(0).find('.tabs_block-link-menu .tabs_block-link'),\n    cards: $('.tabs').eq(0).find('.cardb_visual .dashboard_code-block'),\n    onCardLeave: (card) => {\n      card.hide();\n    },\n    onTabLeave: (tab) => {\n      tab.removeClass(activeClass);\n      // If this is called mid animation (by a click) this will stop it.\n      tab.find(progressLine).stop();\n      tab.find(progressLine).css('width', '0');\n    },\n    onCardShow: cardAnimation,\n    onTabShow: (tab) => {\n      return new Promise((resolve) => {\n        tab.addClass(activeClass);\n        tab.find(progressLine).animate({ width: '100%' }, duration, resolve);\n      });\n    },\n  });\n\n  swiperCarousel({\n    sliderSelector: '.tabs_slider._1',\n    // On init and when the swiper slides, we animate the progressbar and code\n    // block, but only animate the code the first time it's shown.\n    animateOnSlide(activeSlide) {\n      // Set progressLine to 0 and then start an animation for it.\n      activeSlide\n        .find(progressLine)\n        .stop(true, true)\n        .css('width', '0')\n        .animate({ width: '100%' }, duration);\n\n      const codeBlock = activeSlide.find('.dashboard_code-block');\n\n      // Run codeAnimation() this function on that child only if it hasn't been animated before\n      if (codeBlock && !codeBlock.hasClass('animated')) {\n        cardAnimation(codeBlock);\n        codeBlock.addClass('animated');\n      }\n    },\n    onInit() {\n      const sliderCodes = $('.tabs_slider').eq(0).find('.cardb_visual .dashboard_code-block');\n      $(sliderCodes).hide();\n    },\n    duration,\n  });\n\n  // #endregion\n});\n"],
  "mappings": "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",
  "names": ["element", "curIdx", "animation", "duration"]
}
